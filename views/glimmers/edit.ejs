<%- layout('layouts/boilerplate') %>

<style>
    /*
    IMPORTANT: For best practice and maintainability,
    COPY ALL CSS RULES BELOW THIS COMMENT BLOCK
    and PASTE THEM into your main glimmergrid-mvp/public/css/style.css file.
    Then, you can remove this <style> tag from this EJS file.
    This ensures all your styles are centralized and avoids potential issues
    with browser caching or style conflicts.
    */

    /* General Form Styling (can be moved to style.css) */
    .form-container-retro {
        display: flex;
        justify-content: center;
        /* FIX: Align to flex-start to prevent content overflow on very tall forms */
        align-items: flex-start;
        min-height: calc(100vh - var(--navbar-height, 80px) - var(--footer-height, 60px));
        padding: 20px;
        background-color: var(--retro-bg);
    }

    .form-card-retro {
        background-color: var(--retro-primary-teal);
        border: 4px solid var(--retro-shadow-dark);
        border-radius: 15px;
        box-shadow: 0.5em 0.5em 0 var(--retro-accent-red);
        padding: 2.5rem;
        max-width: 600px; /* Wider for forms */
        width: 100%;
        text-align: center;
        position: relative;
        overflow: hidden;
        z-index: 1;
        animation: bounceIn 0.8s ease-out;
    }

    .form-card-retro::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image:
            repeating-linear-gradient(45deg, rgba(0,0,0,0.05) 0, rgba(0,0,0,0.05) 1px, transparent 1px, transparent 10px),
            repeating-linear-gradient(-45deg, rgba(0,0,0,0.05) 0, rgba(0,0,0,0.05) 1px, transparent 1px, transparent 10px);
        background-size: 10px 10px;
        opacity: 0.1;
        z-index: 0;
    }

    .form-content {
        position: relative;
        z-index: 1;
    }

    .form-title-retro {
        font-family: var(--font-heading-retro);
        color: var(--retro-accent-yellow);
        font-size: 2em;
        margin-bottom: 1.5rem;
        text-shadow: 2px 2px 0 var(--retro-shadow-dark);
        text-align: center;
    }

    .form-label-retro {
        font-family: var(--font-heading-retro);
        color: var(--retro-secondary-light);
        font-size: 0.9em;
        margin-bottom: 0.5rem;
        display: block;
        text-align: left;
        text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.3);
    }

    .form-control-retro {
        background-color: var(--retro-bg);
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 8px;
        padding: 0.8em 1em;
        color: var(--retro-text);
        font-family: var(--font-primary);
        font-size: 1em;
        width: 100%;
        box-sizing: border-box;
        margin-bottom: 1rem;
        transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
        box-shadow: 0.2em 0.2em 0 var(--retro-shadow-dark);
    }

    .form-control-retro:focus {
        border-color: var(--retro-accent-yellow);
        box-shadow: 0.2em 0.2em 0 var(--retro-accent-red);
        outline: none;
    }

    .btn-retro-submit {
        background-color: var(--retro-accent-red);
        color: var(--retro-secondary-light);
        font-family: var(--font-heading-retro);
        font-size: 1.1em;
        padding: 0.8em 1.5em;
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 8px;
        box-shadow: 0.3em 0.3em 0 var(--retro-shadow-dark);
        cursor: pointer;
        transition: all var(--transition-fast);
        width: 100%;
        margin-top: 1rem;
    }

    .btn-retro-submit:hover {
        background-color: var(--retro-accent-yellow);
        color: var(--retro-text);
        transform: translateY(-3px);
        box-shadow: 0.4em 0.4em 0 var(--retro-shadow-dark);
    }

    .invalid-feedback-retro {
        color: var(--retro-accent-red);
        font-family: var(--font-primary);
        font-size: 0.85em;
        text-align: left;
        margin-top: -0.8rem; /* Adjust to sit closer to input */
        margin-bottom: 1rem;
        display: none; /* Hidden by default */
    }
    .was-validated .form-control-retro:invalid + .invalid-feedback-retro {
        display: block; /* Show on invalid */
    }
    .was-validated .form-control-retro:invalid {
        border-color: var(--retro-accent-red);
        box-shadow: 0.2em 0.2em 0 var(--retro-accent-red);
    }
    .was-validated .form-control-retro:valid {
        border-color: #28a745; /* Bootstrap green for valid */
    }

    /* Date input specific styling */
    input[type="date"].form-control-retro {
        -webkit-appearance: none; /* Remove default date picker icon */
        -moz-appearance: none;
        appearance: none;
        padding-right: 2.5em; /* Space for custom icon */
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%231F2937" class="bi bi-calendar" viewBox="0 0 16 16"><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM14 4V3a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1h12zM2 5v9h12V5H2z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 0.8em center;
        background-size: 1.2em;
    }

    /* Image Preview */
    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 1rem;
        margin-bottom: 1rem;
        justify-content: center;
        border: 2px dashed var(--retro-shadow-dark);
        padding: 10px;
        border-radius: 8px;
        background-color: rgba(0,0,0,0.05);
    }

    .image-preview-item {
        position: relative;
        width: 100px;
        height: 100px;
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 5px;
        overflow: hidden;
        box-shadow: 0.15em 0.15em 0 rgba(0,0,0,0.2);
    }

    .image-preview-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: var(--retro-accent-red);
        color: var(--retro-secondary-light);
        border: 1px solid var(--retro-shadow-dark);
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 0.8em;
        cursor: pointer;
        line-height: 1;
        padding: 0;
        box-shadow: 0.1em 0.1em 0 rgba(0,0,0,0.2);
        transition: background-color var(--transition-fast);
    }

    .remove-image-btn:hover {
        background-color: var(--retro-shadow-dark);
    }

    .image-upload-feedback {
        font-family: var(--font-primary);
        font-size: 0.85em;
        color: var(--retro-text);
        margin-top: -0.8rem; /* Adjust to sit closer to input */
        text-align: center;
    }

    /* Map Preview */
    .map-preview-container {
        width: 100%;
        height: 250px; /* Fixed height for map preview */
        border: 2px solid var(--retro-shadow-dark);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1rem;
        box-shadow: 0.2em 0.2em 0 var(--retro-shadow-dark);
    }
    .map-preview-container iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: none;
    }

    .location-preview-message {
        font-family: var(--font-primary);
        font-size: 0.9em;
        color: var(--retro-text);
        margin-top: 1em;
        text-shadow: none;
        font-weight: 600;
    }
</style>

<body>
    <div class="form-container-retro">
        <div class="form-card-retro">
            <div class="form-content">
                <h1 class="form-title-retro">EDIT GLIMMER</h1>
                <form action="/glimmers/<%= glimmer._id %>?_method=PUT" method="POST" class="needs-validation" novalidate enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="title" class="form-label-retro">GLIMMER TITLE</label>
                        <input type="text" class="form-control-retro" id="title" name="glimmer[title]" value="<%= glimmer.title %>" required>
                        <div class="invalid-feedback-retro">
                            Please provide a title for your Glimmer.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label-retro">DESCRIPTION</label>
                        <textarea class="form-control-retro" id="description" name="glimmer[description]" rows="5" required><%= glimmer.description %></textarea>
                        <div class="invalid-feedback-retro">
                            Please provide a detailed description.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="locationName" class="form-label-retro">LOCATION NAME</label>
                        <input type="text" class="form-control-retro" id="locationName" name="glimmer[locationName]" value="<%= glimmer.locationName %>" required>
                        <div class="invalid-feedback-retro">
                            Where will this Glimmer take place?
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="latitude" class="form-label-retro">LATITUDE</label>
                        <input type="number" step="any" class="form-control-retro" id="latitude" name="glimmer[latitude]" value="<%= glimmer.geometry.coordinates[1] %>" required>
                        <div class="invalid-feedback-retro">
                            Please provide the latitude.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="longitude" class="form-label-retro">LONGITUDE</label>
                        <input type="number" step="any" class="form-control-retro" id="longitude" name="glimmer[longitude]" value="<%= glimmer.geometry.coordinates[0] %>" required>
                        <div class="invalid-feedback-retro">
                            Please provide the longitude.
                        </div>
                    </div>
                    <div class="map">
                        <% 
                            const mapLat = glimmer.geometry.coordinates[1];
                            const mapLon = glimmer.geometry.coordinates[0];
                            const googleMapsApiKey = 'YOUR_Maps_API_KEY'; // Replace with your actual API key
                            const mapSrc = `https://www.google.com/maps/embed/v1/place?key=${googleMapsApiKey}&q=${mapLat},${mapLon}&zoom=15`;
                        %>
                        <iframe id="mapPreview" width="600" height="450" style="border:0" loading="lazy" allowfullscreen src="<%= mapSrc %>"></iframe>
                    </div>
                    <p class="image-upload-feedback">Adjust latitude/longitude to update map preview.</p>

                    <% 
                        // Format date and time for input fields
                        const glimmerStartDate = new Date(glimmer.startDate);
                        const formattedDate = glimmerStartDate.toISOString().split('T')[0];
                        const formattedTime = glimmerStartDate.toTimeString().split(' ')[0].substring(0, 5); // HH:MM
                    %>

                    <div class="mb-3">
                        <label for="startDate" class="form-label-retro">START DATE</label>
                        <input type="date" class="form-control-retro" id="startDate" name="glimmer[eventDate]" value="<%= formattedDate %>" required>
                        <div class="invalid-feedback-retro">
                            When does this Glimmer start?
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="startTime" class="form-label-retro">START TIME</label>
                        <input type="time" class="form-control-retro" id="startTime" name="glimmer[eventTime]" value="<%= formattedTime %>" required>
                        <div class="invalid-feedback-retro">
                            What time does this Glimmer start?
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="images" class="form-label-retro">UPLOAD NEW GLIMMER IMAGES (MAX 5)</label>
                        <input type="file" class="form-control-retro" id="images" name="image" accept="image/*" multiple>
                        <div class="invalid-feedback-retro">
                            Please upload at least one image for your Glimmer.
                        </div>
                        <p class="image-upload-feedback" id="imageUploadFeedback">Existing images will be replaced by new uploads.</p>
                    </div>

                    <% if (glimmer.image && glimmer.image.length > 0) { %>
                        <div class="image-preview-container" id="currentImagesPreview">
                            <% glimmer.image.forEach((img, index) => { %>
                                <div class="image-preview-item" data-filename="<%= img.filename %>" data-original-url="<%= img.url %>" data-index="<%= index %>">
                                    <img src="<%= img.url %>" alt="<%= glimmer.title %> Image">
                                    <button type="button" class="remove-image-btn" data-type="existing" data-index="<%= index %>">×</button>
                                </div>
                            <% }) %>
                        </div>
                        <input type="hidden" name="glimmer[existingImages]" id="existingImagesInput" value="">
                        <p class="image-upload-feedback">Current Images (click '×' to remove, upload new images to replace all)</p>
                    <% } %>
                    
                    <button type="submit" class="btn-retro-submit">UPDATE GLIMMER</button>
                </form>

                <div class="back-link-section">
                    <p>GO BACK TO GLIMMER DETAILS?</p>
                    <a href="/glimmers/<%= glimmer._id %>">VIEW GLIMMER</a>
                    <p class="mt-3">GO BACK TO YOUR HOSTED GLIMMERS?</p>
                    <a href="/trail/sparks">VIEW SPARKS</a>
                </div>
            </div>
        </div>
    </div>

    <script>
        // IMPORTANT: Replace 'YOUR_Maps_API_KEY' with your actual Google Maps Embed API Key
        const Maps_API_KEY = 'YOUR_Maps_API_KEY'; 
        const MAX_IMAGES = 5; // Define maximum number of images

        // Global variables for image and location management
        let filesToUpload = []; // Array to store newly selected files
        let existingImagesToKeep = []; // Array to store existing image filenames to keep
        let locationObtained = false; // Track if location has been obtained

        // Populate existing images on load
        <% if (glimmer.image && glimmer.image.length > 0) { %>
            existingImagesToKeep = <%= JSON.stringify(glimmer.image.map(img => ({ url: img.url, filename: img.filename }))) %>;
            updateExistingImagesInput(); // Call this to set initial value of hidden input
        <% } %>


        // Function to update the map preview
        const updateMapPreview = () => {
            const latitudeInput = document.getElementById('latitude');
            const longitudeInput = document.getElementById('longitude');
            const mapPreview = document.getElementById('mapPreview');
            const lat = parseFloat(latitudeInput.value);
            const lon = parseFloat(longitudeInput.value);

            if (!isNaN(lat) && !isNaN(lon) && Maps_API_KEY) {
                const mapSrc = `https://www.google.com/maps/embed/v1/place?key=${Maps_API_KEY}&q=${lat},${lon}&zoom=15`;
                mapPreview.src = mapSrc;
            } else {
                mapPreview.src = ""; // Clear map if coordinates are invalid or no API key
            }
        };

        // Function to update the hidden input with existing images to keep
        function updateExistingImagesInput() {
            const existingImagesInput = document.getElementById('existingImagesInput');
            existingImagesInput.value = JSON.stringify(existingImagesToKeep);
        }

        // Function to update the file input's FileList and the upload button's enabled/disabled state
        function updateFileInputAndButton() {
            const imageInput = document.getElementById('images');
            const customFileUploadLabel = document.querySelector('.custom-file-upload');
            const imageUploadFeedback = document.getElementById('image-upload-feedback');

            // Rebuild the FileList for the actual input element from our 'filesToUpload' array
            const dataTransfer = new DataTransfer();
            filesToUpload.forEach(file => dataTransfer.items.add(file));
            imageInput.files = dataTransfer.files; // Assign the new FileList to the input

            const totalImages = filesToUpload.length + existingImagesToKeep.length;

            // Update button disabled state and feedback message
            if (totalImages >= MAX_IMAGES) {
                imageInput.disabled = true; // Disable the file input
                if (customFileUploadLabel) {
                    customFileUploadLabel.classList.add('disabled'); // Add disabled style to label
                }
                imageUploadFeedback.textContent = `Maximum of ${MAX_IMAGES} images reached. Remove some to upload more.`;
                imageUploadFeedback.style.display = 'block';
                imageUploadFeedback.style.color = 'var(--retro-accent-red)';
            } else {
                imageInput.disabled = false; // Enable the file input
                if (customFileUploadLabel) {
                    customFileUploadLabel.classList.remove('disabled'); // Remove disabled style
                }
                if (totalImages === 0) {
                    imageUploadFeedback.textContent = "At least one image is required.";
                    imageUploadFeedback.style.display = 'block';
                    imageUploadFeedback.style.color = 'var(--retro-accent-red)';
                } else {
                    imageUploadFeedback.textContent = `${totalImages} image(s) total selected. You can upload up to ${MAX_IMAGES} images.`;
                    imageUploadFeedback.style.display = 'block';
                    imageUploadFeedback.style.color = 'var(--retro-text)'; // Use default text color for info
                }
            }
        }

        // Function to remove an image from the preview and files array
        // Handles both new files and existing files
        function removeImage(type, index) {
            if (type === 'new') {
                filesToUpload.splice(index, 1);
            } else if (type === 'existing') {
                existingImagesToKeep.splice(index, 1);
                updateExistingImagesInput(); // Update hidden input for existing images
            }
            
            // Re-render ALL image previews (both new and remaining existing) to reflect the change and update data-index
            const imagePreviewContainer = document.getElementById('currentImagesPreview') || document.getElementById('image-preview-container');
            imagePreviewContainer.innerHTML = ''; // Clear current previews

            // Add existing images back to preview
            existingImagesToKeep.forEach((img, idx) => {
                const previewItem = document.createElement('div');
                previewItem.className = 'image-preview-item';
                previewItem.dataset.index = idx; // Assign index in existingImagesToKeep array
                previewItem.dataset.filename = img.filename;
                previewItem.dataset.originalUrl = img.url;

                previewItem.innerHTML = `
                    <img src="${img.url}" alt="Existing Image">
                    <button type="button" class="remove-image-btn" data-type="existing" data-index="${idx}">×</button>
                `;
                imagePreviewContainer.appendChild(previewItem);
            });

            // Add new files to preview
            filesToUpload.forEach((file, idx) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'image-preview-item';
                    previewItem.dataset.index = idx; // Assign index in filesToUpload array
                    previewItem.dataset.name = file.name;
                    previewItem.dataset.type = 'new'; // Mark as new for click handler

                    previewItem.innerHTML = `
                        <img src="${e.target.result}" alt="New Image Preview">
                        <button type="button" class="remove-image-btn" data-type="new" data-index="${idx}">×</button>
                    `;
                    imagePreviewContainer.appendChild(previewItem);
                };
                reader.readAsDataURL(file);
            });
            
            // Update input and button state after removal
            updateFileInputAndButton();
        }


        // Client-side validation for the form
        (function () {
            'use strict';
            const form = document.querySelector('.needs-validation');

            // Initial map load
            updateMapPreview();

            // Add event listeners for coordinate changes
            const latitudeInput = document.getElementById('latitude');
            const longitudeInput = document.getElementById('longitude');
            latitudeInput.addEventListener('input', updateMapPreview);
            longitudeInput.addEventListener('input', updateMapPreview);

            form.addEventListener('submit', function (event) {
                const locationCoordsFeedback = document.getElementById('location-coords-feedback');
                const imageUploadFeedback = document.getElementById('image-upload-feedback');

                let hasErrors = false;

                // Check if coordinates are populated before allowing form submission
                if (!latitudeInput.value || !longitudeInput.value) { // Don't check locationObtained for edit, as user might manually enter coords
                    event.preventDefault();
                    event.stopPropagation();
                    locationCoordsFeedback.textContent = "Location coordinates are required.";
                    locationCoordsFeedback.style.display = 'block';
                    hasErrors = true;
                } else {
                    locationCoordsFeedback.style.display = 'none';
                }

                const totalImages = filesToUpload.length + existingImagesToKeep.length;

                // Check image count before submission
                if (totalImages === 0) {
                    event.preventDefault();
                    event.stopPropagation();
                    imageUploadFeedback.textContent = "At least one image is required.";
                    imageUploadFeedback.style.display = 'block';
                    imageUploadFeedback.style.color = 'var(--retro-accent-red)';
                    hasErrors = true;
                } else if (totalImages > MAX_IMAGES) {
                    event.preventDefault();
                    event.stopPropagation();
                    imageUploadFeedback.textContent = `You can upload a maximum of ${MAX_IMAGES} images.`;
                    imageUploadFeedback.style.display = 'block';
                    imageUploadFeedback.style.color = 'var(--retro-accent-red)';
                    hasErrors = true;
                } else {
                    imageUploadFeedback.style.display = 'none';
                }

                if (!form.checkValidity() || hasErrors) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        })();

        // Event listener for adding new images
        const imageInput = document.getElementById('images');
        const imagePreviewContainer = document.getElementById('currentImagesPreview') || document.getElementById('image-preview-container');
        // filesToUpload and existingImagesToKeep are globally declared at the top of the script.

        imageInput.addEventListener('change', function(event) {
            const newFiles = Array.from(event.target.files);
            
            for (const file of newFiles) {
                const totalCurrentImages = filesToUpload.length + existingImagesToKeep.length;
                if (file.type.startsWith('image/') && totalCurrentImages < MAX_IMAGES) {
                    filesToUpload.push(file);
                } else if (totalCurrentImages >= MAX_IMAGES) {
                    break; 
                }
            }
            updateFileInputAndButton();
            event.target.value = ''; 
        });

        // Universal click listener for remove buttons in the preview containers
        const primaryImagePreviewContainer = document.getElementById('currentImagesPreview') || document.getElementById('image-preview-container');
        if (primaryImagePreviewContainer) {
            primaryImagePreviewContainer.addEventListener('click', function(event) {
                if (event.target.classList.contains('remove-image-btn')) {
                    const button = event.target;
                    const type = button.dataset.type; // 'new' or 'existing'
                    const index = parseInt(button.dataset.index);

                    // Call the global removeImage function
                    removeImage(type, index);
                }
            });
        }
        
        // Initialize button state and previews on page load
        updateFileInputAndButton();
    </script>
</body>
